{"content": "require \"active_support/core_ext/object/json\"\nrequire \"active_support/core_ext/module/delegation\"\n\nmodule ActiveSupport\n  class \u003c\u003c self\n    delegate :use_standard_json_time_format, :use_standard_json_time_format=,\n      :time_precision, :time_precision=,\n      :escape_html_entities_in_json, :escape_html_entities_in_json=,\n      :json_encoder, :json_encoder=,\n      to: :'ActiveSupport::JSON::Encoding'\n  end\n\n  module JSON\n    # Dumps objects in JSON (JavaScript Object Notation).\n    # See http://www.json.org for more info.\n    #\n    #   ActiveSupport::JSON.encode({ team: 'rails', players: '36' })\n    #   # =\u003e \"{\\\"team\\\":\\\"rails\\\",\\\"players\\\":\\\"36\\\"}\"\n    def self.encode(value, options = nil)\n      Encoding.json_encoder.new(options).encode(value)\n    end\n\n    module Encoding #:nodoc:\n      class JSONGemEncoder #:nodoc:\n        attr_reader :options\n\n        def initialize(options = nil)\n          @options = options || {}\n        end\n\n        # Encode the given object into a JSON string\n        def encode(value)\n          stringify jsonify value.as_json(options.dup)\n        end\n\n        private\n          # Rails does more escaping than the JSON gem natively does (we\n          # escape \\u2028 and \\u2029 and optionally \u003e, \u003c, \u0026 to work around\n          # certain browser problems).\n          ESCAPED_CHARS = {\n            \"\\u2028\" =\u003e '\\u2028',\n            \"\\u2029\" =\u003e '\\u2029',\n            \"\u003e\"      =\u003e '\\u003e',\n            \"\u003c\"      =\u003e '\\u003c',\n            \"\u0026\"      =\u003e '\\u0026',\n            }\n\n          ESCAPE_REGEX_WITH_HTML_ENTITIES = /[\\u2028\\u2029\u003e\u003c\u0026]/u\n          ESCAPE_REGEX_WITHOUT_HTML_ENTITIES = /[\\u2028\\u2029]/u\n\n          # This class wraps all the strings we see and does the extra escaping\n          class EscapedString \u003c String #:nodoc:\n            def to_json(*)\n              if Encoding.escape_html_entities_in_json\n                super.gsub ESCAPE_REGEX_WITH_HTML_ENTITIES, ESCAPED_CHARS\n              else\n                super.gsub ESCAPE_REGEX_WITHOUT_HTML_ENTITIES, ESCAPED_CHARS\n              end\n            end\n\n            def to_s\n              self\n            end\n          end\n\n          # Mark these as private so we don't leak encoding-specific constructs\n          private_constant :ESCAPED_CHARS, :ESCAPE_REGEX_WITH_HTML_ENTITIES,\n            :ESCAPE_REGEX_WITHOUT_HTML_ENTITIES, :EscapedString\n\n          # Convert an object into a \"JSON-ready\" representation composed of\n          # primitives like Hash, Array, String, Numeric,\n          # and +true+/+false+/+nil+.\n          # Recursively calls #as_json to the object to recursively build a\n          # fully JSON-ready object.\n          #\n          # This allows developers to implement #as_json without having to\n          # worry about what base types of objects they are allowed to return\n          # or having to remember to call #as_json recursively.\n          #\n          # Note: the +options+ hash passed to +object.to_json+ is only passed\n          # to +object.as_json+, not any of this method's recursive +#as_json+\n          # calls.\n          def jsonify(value)\n            case value\n            when String\n              EscapedString.new(value)\n            when Numeric, NilClass, TrueClass, FalseClass\n              value.as_json\n            when Hash\n              Hash[value.map { |k, v| [jsonify(k), jsonify(v)] }]\n            when Array\n              value.map { |v| jsonify(v) }\n            else\n              jsonify value.as_json\n            end\n          end\n\n          # Encode a \"jsonified\" Ruby data structure using the JSON gem\n          def stringify(jsonified)\n            ::JSON.generate(jsonified, quirks_mode: true, max_nesting: false)\n          end\n      end\n\n      class \u003c\u003c self\n        # If true, use ISO 8601 format for dates and times. Otherwise, fall back\n        # to the Active Support legacy format.\n        attr_accessor :use_standard_json_time_format\n\n        # If true, encode \u003e, \u003c, \u0026 as escaped unicode sequences (e.g. \u003e as \\u003e)\n        # as a safety measure.\n        attr_accessor :escape_html_entities_in_json\n\n        # Sets the precision of encoded time values.\n        # Defaults to 3 (equivalent to millisecond precision)\n        attr_accessor :time_precision\n\n        # Sets the encoder used by Rails to encode Ruby objects into JSON strings\n        # in +Object#to_json+ and +ActiveSupport::JSON.encode+.\n        attr_accessor :json_encoder\n      end\n\n      self.use_standard_json_time_format = true\n      self.escape_html_entities_in_json  = true\n      self.json_encoder = JSONGemEncoder\n      self.time_precision = 3\n    end\n  end\nend\n"}
{"content": "require \"active_support/core_ext/module/attribute_accessors\"\nrequire \"active_support/core_ext/module/delegation\"\nrequire \"json\"\n\nmodule ActiveSupport\n  # Look for and parse json strings that look like ISO 8601 times.\n  mattr_accessor :parse_json_times\n\n  module JSON\n    # matches YAML-formatted dates\n    DATE_REGEX = /^\\d{4}-\\d{2}-\\d{2}$/\n    DATETIME_REGEX = /^(?:\\d{4}-\\d{2}-\\d{2}|\\d{4}-\\d{1,2}-\\d{1,2}[T \\t]+\\d{1,2}:\\d{2}:\\d{2}(\\.[0-9]*)?(([ \\t]*)Z|[-+]\\d{2}?(:\\d{2})?)?)$/\n\n    class \u003c\u003c self\n      # Parses a JSON string (JavaScript Object Notation) into a hash.\n      # See http://www.json.org for more info.\n      #\n      #   ActiveSupport::JSON.decode(\"{\\\"team\\\":\\\"rails\\\",\\\"players\\\":\\\"36\\\"}\")\n      #   =\u003e {\"team\" =\u003e \"rails\", \"players\" =\u003e \"36\"}\n      def decode(json)\n        data = ::JSON.parse(json, quirks_mode: true)\n\n        if ActiveSupport.parse_json_times\n          convert_dates_from(data)\n        else\n          data\n        end\n      end\n\n      # Returns the class of the error that will be raised when there is an\n      # error in decoding JSON. Using this method means you won't directly\n      # depend on the ActiveSupport's JSON implementation, in case it changes\n      # in the future.\n      #\n      #   begin\n      #     obj = ActiveSupport::JSON.decode(some_string)\n      #   rescue ActiveSupport::JSON.parse_error\n      #     Rails.logger.warn(\"Attempted to decode invalid JSON: #{some_string}\")\n      #   end\n      def parse_error\n        ::JSON::ParserError\n      end\n\n      private\n\n      def convert_dates_from(data)\n        case data\n        when nil\n          nil\n        when DATE_REGEX\n          begin\n            Date.parse(data)\n          rescue ArgumentError\n            data\n          end\n        when DATETIME_REGEX\n          begin\n            Time.zone.parse(data)\n          rescue ArgumentError\n            data\n          end\n        when Array\n          data.map! { |d| convert_dates_from(d) }\n        when Hash\n          data.each do |key, value|\n            data[key] = convert_dates_from(value)\n          end\n        else\n          data\n        end\n      end\n    end\n  end\nend\n"}
{"content": "version = File.read(File.expand_path(\"../../RAILS_VERSION\", __FILE__)).strip\n\nGem::Specification.new do |s|\n  s.platform    = Gem::Platform::RUBY\n  s.name        = \"activesupport\"\n  s.version     = version\n  s.summary     = \"A toolkit of support libraries and Ruby core extensions extracted from the Rails framework.\"\n  s.description = \"A toolkit of support libraries and Ruby core extensions extracted from the Rails framework. Rich support for multibyte strings, internationalization, time zones, and testing.\"\n\n  s.required_ruby_version = \"\u003e= 2.2.2\"\n\n  s.license = \"MIT\"\n\n  s.author   = \"David Heinemeier Hansson\"\n  s.email    = \"david@loudthinking.com\"\n  s.homepage = \"http://rubyonrails.org\"\n\n  s.files        = Dir[\"CHANGELOG.md\", \"MIT-LICENSE\", \"README.rdoc\", \"lib/**/*\"]\n  s.require_path = \"lib\"\n\n  s.rdoc_options.concat [\"--encoding\",  \"UTF-8\"]\n\n  s.add_dependency \"i18n\",       \"~\u003e 0.7\"\n  s.add_dependency \"tzinfo\",     \"~\u003e 1.1\"\n  s.add_dependency \"minitest\",   \"~\u003e 5.1\"\n  s.add_dependency \"concurrent-ruby\", \"~\u003e 1.0\", \"\u003e= 1.0.2\"\nend\n"}
