{"content": "require \"active_support/core_ext/module/attribute_accessors\"\nrequire \"active_support/core_ext/module/delegation\"\nrequire \"json\"\n\nmodule ActiveSupport\n  # Look for and parse json strings that look like ISO 8601 times.\n  mattr_accessor :parse_json_times\n\n  module JSON\n    # matches YAML-formatted dates\n    DATE_REGEX = /^\\d{4}-\\d{2}-\\d{2}$/\n    DATETIME_REGEX = /^(?:\\d{4}-\\d{2}-\\d{2}|\\d{4}-\\d{1,2}-\\d{1,2}[T \\t]+\\d{1,2}:\\d{2}:\\d{2}(\\.[0-9]*)?(([ \\t]*)Z|[-+]\\d{2}?(:\\d{2})?)?)$/\n\n    class \u003c\u003c self\n      # Parses a JSON string (JavaScript Object Notation) into a hash.\n      # See http://www.json.org for more info.\n      #\n      #   ActiveSupport::JSON.decode(\"{\\\"team\\\":\\\"rails\\\",\\\"players\\\":\\\"36\\\"}\")\n      #   =\u003e {\"team\" =\u003e \"rails\", \"players\" =\u003e \"36\"}\n      def decode(json)\n        data = ::JSON.parse(json, quirks_mode: true)\n\n        if ActiveSupport.parse_json_times\n          convert_dates_from(data)\n        else\n          data\n        end\n      end\n\n      # Returns the class of the error that will be raised when there is an\n      # error in decoding JSON. Using this method means you won't directly\n      # depend on the ActiveSupport's JSON implementation, in case it changes\n      # in the future.\n      #\n      #   begin\n      #     obj = ActiveSupport::JSON.decode(some_string)\n      #   rescue ActiveSupport::JSON.parse_error\n      #     Rails.logger.warn(\"Attempted to decode invalid JSON: #{some_string}\")\n      #   end\n      def parse_error\n        ::JSON::ParserError\n      end\n\n      private\n\n      def convert_dates_from(data)\n        case data\n        when nil\n          nil\n        when DATE_REGEX\n          begin\n            Date.parse(data)\n          rescue ArgumentError\n            data\n          end\n        when DATETIME_REGEX\n          begin\n            Time.zone.parse(data)\n          rescue ArgumentError\n            data\n          end\n        when Array\n          data.map! { |d| convert_dates_from(d) }\n        when Hash\n          data.each do |key, value|\n            data[key] = convert_dates_from(value)\n          end\n        else\n          data\n        end\n      end\n    end\n  end\nend\n"}
